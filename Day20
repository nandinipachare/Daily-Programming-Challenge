#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Define stack structure
#define MAX 10000  // Constraint: up to 10^4 elements

typedef struct {
    int arr[MAX];
    int top;
} Stack;

// Initialize stack
void init(Stack *s) {
    s->top = -1;
}

// Check if stack is empty
int isEmpty(Stack *s) {
    return s->top == -1;
}

// Check if stack is full
int isFull(Stack *s) {
    return s->top == MAX - 1;
}

// Push element onto stack
void push(Stack *s, int val) {
    if (!isFull(s)) {
        s->arr[++s->top] = val;
    }
}

// Pop element from stack
int pop(Stack *s) {
    if (!isEmpty(s)) {
        return s->arr[s->top--];
    }
    return INT_MIN; // Underflow
}

// Peek top element
int peek(Stack *s) {
    if (!isEmpty(s)) {
        return s->arr[s->top];
    }
    return INT_MIN; // Empty
}

// Recursive function to insert element into sorted stack
void sortedInsert(Stack *s, int val) {
    // Base case: stack empty or val >= top
    if (isEmpty(s) || val >= peek(s)) {
        push(s, val);
        return;
    }

    // Otherwise, pop top and recurse
    int temp = pop(s);
    sortedInsert(s, val);

    // Push the stored element back
    push(s, temp);
}

// Recursive function to sort stack
void sortStack(Stack *s) {
    if (!isEmpty(s)) {
        int temp = pop(s);
        sortStack(s);
        sortedInsert(s, temp);
    }
}

// Utility function to print stack (top to bottom)
void printStack(Stack *s) {
    for (int i = 0; i <= s->top; i++) {
        printf("%d ", s->arr[i]);
    }
    printf("\n");
}

// Driver code
int main() {
    Stack s;
    init(&s);

    // Example input
    push(&s, 3);
    push(&s, 1);
    push(&s, 4);
    push(&s, 2);

    printf("Original Stack: ");
    printStack(&s);

    sortStack(&s);

    printf("Sorted Stack:   ");
    printStack(&s);

    return 0;
}

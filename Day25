#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

// Definition for a binary tree node
struct TreeNode {
    int val;
    struct TreeNode *left;
    struct TreeNode *right;
};

// Helper function to create new nodes
struct TreeNode* newNode(int val) {
    struct TreeNode* node = (struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->val = val;
    node->left = node->right = NULL;
    return node;
}

// Recursive helper function to validate BST
int isValidBSTHelper(struct TreeNode* root, long minVal, long maxVal) {
    if (root == NULL) return 1; // Empty tree is valid BST

    if (root->val <= minVal || root->val >= maxVal)
        return 0;

    return isValidBSTHelper(root->left, minVal, root->val) &&
           isValidBSTHelper(root->right, root->val, maxVal);
}

// Main function
int isValidBST(struct TreeNode* root) {
    return isValidBSTHelper(root, LONG_MIN, LONG_MAX);
}

// ----------------- Test Code -----------------
int main() {
    // Example 1: [2,1,3]
    struct TreeNode* root1 = newNode(2);
    root1->left = newNode(1);
    root1->right = newNode(3);

    printf("Test 1: %s\n", isValidBST(root1) ? "true" : "false"); // true

    // Example 2: [5,1,4,null,null,3,6]
    struct TreeNode* root2 = newNode(5);
    root2->left = newNode(1);
    root2->right = newNode(4);
    root2->right->left = newNode(3);
    root2->right->right = newNode(6);

    printf("Test 2: %s\n", isValidBST(root2) ? "true" : "false"); // false

    // Example 3: [10,5,15,null,null,6,20]
    struct TreeNode* root3 = newNode(10);
    root3->left = newNode(5);
    root3->right = newNode(15);
    root3->right->left = newNode(6);
    root3->right->right = newNode(20);

    printf("Test 3: %s\n", isValidBST(root3) ? "true" : "false"); // false

    // Edge Case 1: Single node
    struct TreeNode* root4 = newNode(1);
    printf("Test 4 (single node): %s\n", isValidBST(root4) ? "true" : "false"); // true

    // Edge Case 2: Tree with repeated values
    struct TreeNode* root5 = newNode(2);
    root5->left = newNode(2);
    printf("Test 5 (repeated values): %s\n", isValidBST(root5) ? "true" : "false"); // false

    return 0;
}

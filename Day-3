#include <stdio.h>

// Function to find the duplicate number using Floyd's cycle detection algorithm
int findDuplicate(int* arr, int n) {
    int slow = arr[0];
    int fast = arr[0];

    // Phase 1: Detect the cycle
    do {
        slow = arr[slow];
        fast = arr[arr[fast]];
    } while (slow != fast);

    // Phase 2: Find the entrance to the cycle (duplicate number)
    slow = arr[0];
    while (slow != fast) {
        slow = arr[slow];
        fast = arr[fast];
    }

    return slow;
}

int main() {
    // Test Case 1
    int arr1[] = {1, 3, 4, 2, 2};
    int n1 = sizeof(arr1)/sizeof(arr1[0]) - 1;
    printf("Duplicate number: %d\n", findDuplicate(arr1, n1));

    // Test Case 2
    int arr2[] = {3, 1, 3, 4, 2};
    int n2 = sizeof(arr2)/sizeof(arr2[0]) - 1;
    printf("Duplicate number: %d\n", findDuplicate(arr2, n2));

    // Test Case 3
    int arr3[] = {1, 1};
    int n3 = sizeof(arr3)/sizeof(arr3[0]) - 1;
    printf("Duplicate number: %d\n", findDuplicate(arr3, n3));

    // Test Case 4
    int arr4[] = {1, 4, 4, 2, 3};
    int n4 = sizeof(arr4)/sizeof(arr4[0]) - 1;
    printf("Duplicate number: %d\n", findDuplicate(arr4, n4));

    return 0;
}

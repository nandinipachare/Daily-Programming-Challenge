#include <stdio.h>
#include <string.h>

// Function to expand around the center and return palindrome length
int expandAroundCenter(char *s, int left, int right) {
    int n = strlen(s);
    while (left >= 0 && right < n && s[left] == s[right]) {
        left--;
        right++;
    }
    return right - left - 1;  // length of palindrome
}

// Function to find the longest palindromic substring
void longestPalindrome(char *s, char *result) {
    int n = strlen(s);
    if (n == 0) {
        result[0] = '\0';
        return;
    }

    int start = 0, maxLen = 1;

    for (int i = 0; i < n; i++) {
        // Odd length palindrome
        int len1 = expandAroundCenter(s, i, i);
        // Even length palindrome
        int len2 = expandAroundCenter(s, i, i + 1);
        
        int len = (len1 > len2) ? len1 : len2;

        if (len > maxLen) {
            maxLen = len;
            start = i - (len - 1) / 2;
        }
    }

    strncpy(result, s + start, maxLen);
    result[maxLen] = '\0';  // Null terminate the string
}

// Driver code
int main() {
    char s[1001];
    char result[1001];

    printf("Enter the string: ");
    scanf("%1000s", s);

    longestPalindrome(s, result);

    printf("Longest Palindromic Substring: %s\n", result);

    return 0;
}
